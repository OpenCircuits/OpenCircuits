import {OperatorFormat} from "./Constants/DataStructures";
import {FORMATS}        from "./Constants/Formats";

import {GenerateInputTree}        from "./GenerateInputTree";
import {GenerateTokens}           from "./GenerateTokens";
import {TreeToCircuit}            from "./TreeToCircuit";
import {ValidateInputOutputTypes} from "./Utils";
import {DigitalCircuit}           from "digital/public";


/**
 * Main driver function for parsing an expression into a circuit.
 *
 * @param inputs     A map correlating input name to the DigitalComponent it represents.
 * @param expression The expression to be parsed.
 * @param output     The DigitalComponent to use as an output, port 0 will be used.
 * @param ops        The strings used to represent the different operators.
 * @returns          The circuit generated by the given expression, null on error (see above).
 * @throws Parenthesis do not include anything (such as "()").
 * @throws An opening parenthesis is missing a corresponding closing parenthesis (such as "(").
 * @throws A closing parenthesis is missing a corresponding opening parenthesis (such as ")").
 * @throws `|`, `&`, or `^` are missing an operand on their left (such as "a|").
 * @throws `|`, `&`, `^`, or `!` are missing an operand on their right (such as "!a").
 * @throws There is no operator between two inputs (such as "a b").
 * @throws The expression references an input not found in inputs.
 * @throws If ops is missing the keys "|", "^", "&", "(", ")", or "separator".
 * @throws If the value in ops for keys "|", "^", "&", "(", ")", or "separator" is "".
 */
export function ExpressionToCircuit(inputs: Map<string, string>,
                                    expression: string,
                                    output: string,
                                    ops: OperatorFormat = FORMATS[0]): DigitalCircuit {

    ValidateInputOutputTypes(inputs, output);

    const tokenList = GenerateTokens(expression, ops);

    const connectedTree = GenerateInputTree(tokenList, ops.ops);

    return TreeToCircuit(connectedTree, inputs, output);
}
