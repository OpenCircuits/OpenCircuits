// source: src/projects/shared/site/src/proto/Circuit.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.Camera', null, global);
goog.exportSymbol('proto.Circuit', null, global);
goog.exportSymbol('proto.CircuitMetadata', null, global);
goog.exportSymbol('proto.Component', null, global);
goog.exportSymbol('proto.IntegratedCircuit', null, global);
goog.exportSymbol('proto.IntegratedCircuitMetadata', null, global);
goog.exportSymbol('proto.IntegratedCircuitMetadata.Pin', null, global);
goog.exportSymbol('proto.Port', null, global);
goog.exportSymbol('proto.Prop', null, global);
goog.exportSymbol('proto.Prop.PropCase', null, global);
goog.exportSymbol('proto.Wire', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Prop = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Prop.oneofGroups_);
};
goog.inherits(proto.Prop, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Prop.displayName = 'proto.Prop';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Port = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Port, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Port.displayName = 'proto.Port';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Component = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Component.repeatedFields_, null);
};
goog.inherits(proto.Component, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Component.displayName = 'proto.Component';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Wire = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Wire, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Wire.displayName = 'proto.Wire';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Camera = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Camera, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Camera.displayName = 'proto.Camera';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CircuitMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CircuitMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.CircuitMetadata.displayName = 'proto.CircuitMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IntegratedCircuitMetadata = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IntegratedCircuitMetadata.repeatedFields_, null);
};
goog.inherits(proto.IntegratedCircuitMetadata, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IntegratedCircuitMetadata.displayName = 'proto.IntegratedCircuitMetadata';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IntegratedCircuitMetadata.Pin = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.IntegratedCircuitMetadata.Pin, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IntegratedCircuitMetadata.Pin.displayName = 'proto.IntegratedCircuitMetadata.Pin';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.IntegratedCircuit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.IntegratedCircuit.repeatedFields_, null);
};
goog.inherits(proto.IntegratedCircuit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.IntegratedCircuit.displayName = 'proto.IntegratedCircuit';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Circuit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Circuit.repeatedFields_, null);
};
goog.inherits(proto.Circuit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Circuit.displayName = 'proto.Circuit';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Prop.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.Prop.PropCase = {
  PROP_NOT_SET: 0,
  INT_VAL: 1,
  FLOAT_VAL: 2,
  STR_VAL: 3,
  BOOL_VAL: 4
};

/**
 * @return {proto.Prop.PropCase}
 */
proto.Prop.prototype.getPropCase = function() {
  return /** @type {proto.Prop.PropCase} */(jspb.Message.computeOneofCase(this, proto.Prop.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Prop.prototype.toObject = function(opt_includeInstance) {
  return proto.Prop.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Prop} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Prop.toObject = function(includeInstance, msg) {
  var f, obj = {
intVal: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
floatVal: (f = jspb.Message.getOptionalFloatingPointField(msg, 2)) == null ? undefined : f,
strVal: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
boolVal: (f = jspb.Message.getBooleanField(msg, 4)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Prop}
 */
proto.Prop.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Prop;
  return proto.Prop.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Prop} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Prop}
 */
proto.Prop.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIntVal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFloatVal(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setStrVal(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBoolVal(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Prop.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Prop.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Prop} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Prop.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional int32 int_val = 1;
 * @return {number}
 */
proto.Prop.prototype.getIntVal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Prop} returns this
 */
proto.Prop.prototype.setIntVal = function(value) {
  return jspb.Message.setOneofField(this, 1, proto.Prop.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Prop} returns this
 */
proto.Prop.prototype.clearIntVal = function() {
  return jspb.Message.setOneofField(this, 1, proto.Prop.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Prop.prototype.hasIntVal = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float float_val = 2;
 * @return {number}
 */
proto.Prop.prototype.getFloatVal = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Prop} returns this
 */
proto.Prop.prototype.setFloatVal = function(value) {
  return jspb.Message.setOneofField(this, 2, proto.Prop.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Prop} returns this
 */
proto.Prop.prototype.clearFloatVal = function() {
  return jspb.Message.setOneofField(this, 2, proto.Prop.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Prop.prototype.hasFloatVal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string str_val = 3;
 * @return {string}
 */
proto.Prop.prototype.getStrVal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Prop} returns this
 */
proto.Prop.prototype.setStrVal = function(value) {
  return jspb.Message.setOneofField(this, 3, proto.Prop.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Prop} returns this
 */
proto.Prop.prototype.clearStrVal = function() {
  return jspb.Message.setOneofField(this, 3, proto.Prop.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Prop.prototype.hasStrVal = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool bool_val = 4;
 * @return {boolean}
 */
proto.Prop.prototype.getBoolVal = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 4, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Prop} returns this
 */
proto.Prop.prototype.setBoolVal = function(value) {
  return jspb.Message.setOneofField(this, 4, proto.Prop.oneofGroups_[0], value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Prop} returns this
 */
proto.Prop.prototype.clearBoolVal = function() {
  return jspb.Message.setOneofField(this, 4, proto.Prop.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Prop.prototype.hasBoolVal = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Port.prototype.toObject = function(opt_includeInstance) {
  return proto.Port.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Port} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Port.toObject = function(includeInstance, msg) {
  var f, obj = {
group: jspb.Message.getFieldWithDefault(msg, 1, ""),
index: jspb.Message.getFieldWithDefault(msg, 2, 0),
name: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
otherpropsMap: (f = msg.getOtherpropsMap()) ? f.toObject(includeInstance, proto.Prop.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Port}
 */
proto.Port.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Port;
  return proto.Port.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Port} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Port}
 */
proto.Port.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGroup(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 4:
      var value = msg.getOtherpropsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Prop.deserializeBinaryFromReader, "", new proto.Prop());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Port.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Port.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Port} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Port.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGroup();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getOtherpropsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Prop.serializeBinaryToWriter);
  }
};


/**
 * optional string group = 1;
 * @return {string}
 */
proto.Port.prototype.getGroup = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Port} returns this
 */
proto.Port.prototype.setGroup = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 index = 2;
 * @return {number}
 */
proto.Port.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Port} returns this
 */
proto.Port.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.Port.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.Port} returns this
 */
proto.Port.prototype.setName = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Port} returns this
 */
proto.Port.prototype.clearName = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Port.prototype.hasName = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * map<string, Prop> otherProps = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Prop>}
 */
proto.Port.prototype.getOtherpropsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Prop>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.Prop));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Port} returns this
 */
proto.Port.prototype.clearOtherpropsMap = function() {
  this.getOtherpropsMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Component.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Component.prototype.toObject = function(opt_includeInstance) {
  return proto.Component.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Component} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Component.toObject = function(includeInstance, msg) {
  var f, obj = {
kind: jspb.Message.getFieldWithDefault(msg, 1, 0),
icidx: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
portconfigidx: (f = jspb.Message.getField(msg, 3)) == null ? undefined : f,
name: (f = jspb.Message.getField(msg, 4)) == null ? undefined : f,
x: (f = jspb.Message.getOptionalFloatingPointField(msg, 5)) == null ? undefined : f,
y: (f = jspb.Message.getOptionalFloatingPointField(msg, 6)) == null ? undefined : f,
angle: (f = jspb.Message.getOptionalFloatingPointField(msg, 7)) == null ? undefined : f,
otherpropsMap: (f = msg.getOtherpropsMap()) ? f.toObject(includeInstance, proto.Prop.toObject) : [],
portoverridesList: jspb.Message.toObjectList(msg.getPortoverridesList(),
    proto.Port.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Component}
 */
proto.Component.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Component;
  return proto.Component.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Component} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Component}
 */
proto.Component.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setIcidx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPortconfigidx(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAngle(value);
      break;
    case 8:
      var value = msg.getOtherpropsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Prop.deserializeBinaryFromReader, "", new proto.Prop());
         });
      break;
    case 9:
      var value = new proto.Port;
      reader.readMessage(value,proto.Port.deserializeBinaryFromReader);
      msg.addPortoverrides(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Component.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Component.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Component} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Component.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getKind();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getOtherpropsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(8, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Prop.serializeBinaryToWriter);
  }
  f = message.getPortoverridesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.Port.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 kind = 1;
 * @return {number}
 */
proto.Component.prototype.getKind = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.setKind = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 icIdx = 2;
 * @return {number}
 */
proto.Component.prototype.getIcidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.setIcidx = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.clearIcidx = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Component.prototype.hasIcidx = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 portConfigIdx = 3;
 * @return {number}
 */
proto.Component.prototype.getPortconfigidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.setPortconfigidx = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.clearPortconfigidx = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Component.prototype.hasPortconfigidx = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.Component.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.setName = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.clearName = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Component.prototype.hasName = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float x = 5;
 * @return {number}
 */
proto.Component.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.setX = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.clearX = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Component.prototype.hasX = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional float y = 6;
 * @return {number}
 */
proto.Component.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.setY = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.clearY = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Component.prototype.hasY = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional float angle = 7;
 * @return {number}
 */
proto.Component.prototype.getAngle = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.setAngle = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.clearAngle = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Component.prototype.hasAngle = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * map<string, Prop> otherProps = 8;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Prop>}
 */
proto.Component.prototype.getOtherpropsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Prop>} */ (
      jspb.Message.getMapField(this, 8, opt_noLazyCreate,
      proto.Prop));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.clearOtherpropsMap = function() {
  this.getOtherpropsMap().clear();
  return this;
};


/**
 * repeated Port portOverrides = 9;
 * @return {!Array<!proto.Port>}
 */
proto.Component.prototype.getPortoverridesList = function() {
  return /** @type{!Array<!proto.Port>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Port, 9));
};


/**
 * @param {!Array<!proto.Port>} value
 * @return {!proto.Component} returns this
*/
proto.Component.prototype.setPortoverridesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.Port=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Port}
 */
proto.Component.prototype.addPortoverrides = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.Port, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Component} returns this
 */
proto.Component.prototype.clearPortoverridesList = function() {
  return this.setPortoverridesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Wire.prototype.toObject = function(opt_includeInstance) {
  return proto.Wire.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Wire} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Wire.toObject = function(includeInstance, msg) {
  var f, obj = {
kind: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
p1parentidx: jspb.Message.getFieldWithDefault(msg, 2, 0),
p1group: jspb.Message.getFieldWithDefault(msg, 3, 0),
p1idx: jspb.Message.getFieldWithDefault(msg, 4, 0),
p2parentidx: jspb.Message.getFieldWithDefault(msg, 5, 0),
p2group: jspb.Message.getFieldWithDefault(msg, 6, 0),
p2idx: jspb.Message.getFieldWithDefault(msg, 7, 0),
name: (f = jspb.Message.getField(msg, 8)) == null ? undefined : f,
color: (f = jspb.Message.getField(msg, 9)) == null ? undefined : f,
otherpropsMap: (f = msg.getOtherpropsMap()) ? f.toObject(includeInstance, proto.Prop.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Wire}
 */
proto.Wire.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Wire;
  return proto.Wire.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Wire} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Wire}
 */
proto.Wire.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setKind(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setP1parentidx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setP1group(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setP1idx(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setP2parentidx(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setP2group(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setP2idx(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setColor(value);
      break;
    case 10:
      var value = msg.getOtherpropsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.Prop.deserializeBinaryFromReader, "", new proto.Prop());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Wire.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Wire.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Wire} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Wire.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getP1parentidx();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getP1group();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getP1idx();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getP2parentidx();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getP2group();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getP2idx();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeString(
      8,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 9));
  if (f != null) {
    writer.writeUint32(
      9,
      f
    );
  }
  f = message.getOtherpropsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(10, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.Prop.serializeBinaryToWriter);
  }
};


/**
 * optional uint32 kind = 1;
 * @return {number}
 */
proto.Wire.prototype.getKind = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.setKind = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.clearKind = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Wire.prototype.hasKind = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 p1ParentIdx = 2;
 * @return {number}
 */
proto.Wire.prototype.getP1parentidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.setP1parentidx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 p1Group = 3;
 * @return {number}
 */
proto.Wire.prototype.getP1group = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.setP1group = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 p1Idx = 4;
 * @return {number}
 */
proto.Wire.prototype.getP1idx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.setP1idx = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 p2ParentIdx = 5;
 * @return {number}
 */
proto.Wire.prototype.getP2parentidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.setP2parentidx = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 p2Group = 6;
 * @return {number}
 */
proto.Wire.prototype.getP2group = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.setP2group = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 p2Idx = 7;
 * @return {number}
 */
proto.Wire.prototype.getP2idx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.setP2idx = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string name = 8;
 * @return {string}
 */
proto.Wire.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.setName = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.clearName = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Wire.prototype.hasName = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional uint32 color = 9;
 * @return {number}
 */
proto.Wire.prototype.getColor = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.setColor = function(value) {
  return jspb.Message.setField(this, 9, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.clearColor = function() {
  return jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Wire.prototype.hasColor = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * map<string, Prop> otherProps = 10;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.Prop>}
 */
proto.Wire.prototype.getOtherpropsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.Prop>} */ (
      jspb.Message.getMapField(this, 10, opt_noLazyCreate,
      proto.Prop));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.Wire} returns this
 */
proto.Wire.prototype.clearOtherpropsMap = function() {
  this.getOtherpropsMap().clear();
  return this;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Camera.prototype.toObject = function(opt_includeInstance) {
  return proto.Camera.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Camera} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Camera.toObject = function(includeInstance, msg) {
  var f, obj = {
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
zoom: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Camera}
 */
proto.Camera.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Camera;
  return proto.Camera.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Camera} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Camera}
 */
proto.Camera.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZoom(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Camera.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Camera.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Camera} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Camera.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getZoom();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float x = 1;
 * @return {number}
 */
proto.Camera.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Camera} returns this
 */
proto.Camera.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float y = 2;
 * @return {number}
 */
proto.Camera.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Camera} returns this
 */
proto.Camera.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float zoom = 3;
 * @return {number}
 */
proto.Camera.prototype.getZoom = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Camera} returns this
 */
proto.Camera.prototype.setZoom = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CircuitMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.CircuitMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CircuitMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CircuitMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
id: msg.getId_asB64(),
name: jspb.Message.getFieldWithDefault(msg, 2, ""),
desc: jspb.Message.getFieldWithDefault(msg, 3, ""),
thumb: jspb.Message.getFieldWithDefault(msg, 4, ""),
version: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CircuitMetadata}
 */
proto.CircuitMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CircuitMetadata;
  return proto.CircuitMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CircuitMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CircuitMetadata}
 */
proto.CircuitMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDesc(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setThumb(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CircuitMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CircuitMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CircuitMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CircuitMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDesc();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getThumb();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional bytes id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.CircuitMetadata.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes id = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.CircuitMetadata.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.CircuitMetadata.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.CircuitMetadata} returns this
 */
proto.CircuitMetadata.prototype.setId = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.CircuitMetadata.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.CircuitMetadata} returns this
 */
proto.CircuitMetadata.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string desc = 3;
 * @return {string}
 */
proto.CircuitMetadata.prototype.getDesc = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.CircuitMetadata} returns this
 */
proto.CircuitMetadata.prototype.setDesc = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string thumb = 4;
 * @return {string}
 */
proto.CircuitMetadata.prototype.getThumb = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.CircuitMetadata} returns this
 */
proto.CircuitMetadata.prototype.setThumb = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string version = 5;
 * @return {string}
 */
proto.CircuitMetadata.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.CircuitMetadata} returns this
 */
proto.CircuitMetadata.prototype.setVersion = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IntegratedCircuitMetadata.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IntegratedCircuitMetadata.prototype.toObject = function(opt_includeInstance) {
  return proto.IntegratedCircuitMetadata.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IntegratedCircuitMetadata} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntegratedCircuitMetadata.toObject = function(includeInstance, msg) {
  var f, obj = {
metadata: (f = msg.getMetadata()) && proto.CircuitMetadata.toObject(includeInstance, f),
displaywidth: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
displayheight: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
portgroupsMap: (f = msg.getPortgroupsMap()) ? f.toObject(includeInstance, undefined) : [],
pinsList: jspb.Message.toObjectList(msg.getPinsList(),
    proto.IntegratedCircuitMetadata.Pin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IntegratedCircuitMetadata}
 */
proto.IntegratedCircuitMetadata.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IntegratedCircuitMetadata;
  return proto.IntegratedCircuitMetadata.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IntegratedCircuitMetadata} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IntegratedCircuitMetadata}
 */
proto.IntegratedCircuitMetadata.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CircuitMetadata;
      reader.readMessage(value,proto.CircuitMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDisplaywidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDisplayheight(value);
      break;
    case 4:
      var value = msg.getPortgroupsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readUint32, null, "", 0);
         });
      break;
    case 5:
      var value = new proto.IntegratedCircuitMetadata.Pin;
      reader.readMessage(value,proto.IntegratedCircuitMetadata.Pin.deserializeBinaryFromReader);
      msg.addPins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IntegratedCircuitMetadata.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IntegratedCircuitMetadata.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IntegratedCircuitMetadata} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntegratedCircuitMetadata.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CircuitMetadata.serializeBinaryToWriter
    );
  }
  f = message.getDisplaywidth();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getDisplayheight();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getPortgroupsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeUint32);
  }
  f = message.getPinsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.IntegratedCircuitMetadata.Pin.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IntegratedCircuitMetadata.Pin.prototype.toObject = function(opt_includeInstance) {
  return proto.IntegratedCircuitMetadata.Pin.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IntegratedCircuitMetadata.Pin} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntegratedCircuitMetadata.Pin.toObject = function(includeInstance, msg) {
  var f, obj = {
internalcompidx: jspb.Message.getFieldWithDefault(msg, 1, 0),
internalportidx: jspb.Message.getFieldWithDefault(msg, 2, 0),
group: jspb.Message.getFieldWithDefault(msg, 3, 0),
name: jspb.Message.getFieldWithDefault(msg, 4, ""),
x: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
y: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
dx: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
dy: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IntegratedCircuitMetadata.Pin}
 */
proto.IntegratedCircuitMetadata.Pin.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IntegratedCircuitMetadata.Pin;
  return proto.IntegratedCircuitMetadata.Pin.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IntegratedCircuitMetadata.Pin} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IntegratedCircuitMetadata.Pin}
 */
proto.IntegratedCircuitMetadata.Pin.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInternalcompidx(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInternalportidx(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setGroup(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDx(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDy(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IntegratedCircuitMetadata.Pin.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IntegratedCircuitMetadata.Pin.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IntegratedCircuitMetadata.Pin} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntegratedCircuitMetadata.Pin.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInternalcompidx();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getInternalportidx();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getGroup();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getX();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getY();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getDx();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getDy();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
};


/**
 * optional uint32 internalCompIdx = 1;
 * @return {number}
 */
proto.IntegratedCircuitMetadata.Pin.prototype.getInternalcompidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.IntegratedCircuitMetadata.Pin} returns this
 */
proto.IntegratedCircuitMetadata.Pin.prototype.setInternalcompidx = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 internalPortIdx = 2;
 * @return {number}
 */
proto.IntegratedCircuitMetadata.Pin.prototype.getInternalportidx = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.IntegratedCircuitMetadata.Pin} returns this
 */
proto.IntegratedCircuitMetadata.Pin.prototype.setInternalportidx = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 group = 3;
 * @return {number}
 */
proto.IntegratedCircuitMetadata.Pin.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.IntegratedCircuitMetadata.Pin} returns this
 */
proto.IntegratedCircuitMetadata.Pin.prototype.setGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.IntegratedCircuitMetadata.Pin.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.IntegratedCircuitMetadata.Pin} returns this
 */
proto.IntegratedCircuitMetadata.Pin.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional float x = 5;
 * @return {number}
 */
proto.IntegratedCircuitMetadata.Pin.prototype.getX = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IntegratedCircuitMetadata.Pin} returns this
 */
proto.IntegratedCircuitMetadata.Pin.prototype.setX = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float y = 6;
 * @return {number}
 */
proto.IntegratedCircuitMetadata.Pin.prototype.getY = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IntegratedCircuitMetadata.Pin} returns this
 */
proto.IntegratedCircuitMetadata.Pin.prototype.setY = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float dx = 7;
 * @return {number}
 */
proto.IntegratedCircuitMetadata.Pin.prototype.getDx = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IntegratedCircuitMetadata.Pin} returns this
 */
proto.IntegratedCircuitMetadata.Pin.prototype.setDx = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float dy = 8;
 * @return {number}
 */
proto.IntegratedCircuitMetadata.Pin.prototype.getDy = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IntegratedCircuitMetadata.Pin} returns this
 */
proto.IntegratedCircuitMetadata.Pin.prototype.setDy = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional CircuitMetadata metadata = 1;
 * @return {?proto.CircuitMetadata}
 */
proto.IntegratedCircuitMetadata.prototype.getMetadata = function() {
  return /** @type{?proto.CircuitMetadata} */ (
    jspb.Message.getWrapperField(this, proto.CircuitMetadata, 1));
};


/**
 * @param {?proto.CircuitMetadata|undefined} value
 * @return {!proto.IntegratedCircuitMetadata} returns this
*/
proto.IntegratedCircuitMetadata.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IntegratedCircuitMetadata} returns this
 */
proto.IntegratedCircuitMetadata.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IntegratedCircuitMetadata.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float displayWidth = 2;
 * @return {number}
 */
proto.IntegratedCircuitMetadata.prototype.getDisplaywidth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IntegratedCircuitMetadata} returns this
 */
proto.IntegratedCircuitMetadata.prototype.setDisplaywidth = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float displayHeight = 3;
 * @return {number}
 */
proto.IntegratedCircuitMetadata.prototype.getDisplayheight = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.IntegratedCircuitMetadata} returns this
 */
proto.IntegratedCircuitMetadata.prototype.setDisplayheight = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * map<string, uint32> portGroups = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,number>}
 */
proto.IntegratedCircuitMetadata.prototype.getPortgroupsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,number>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.IntegratedCircuitMetadata} returns this
 */
proto.IntegratedCircuitMetadata.prototype.clearPortgroupsMap = function() {
  this.getPortgroupsMap().clear();
  return this;
};


/**
 * repeated Pin pins = 5;
 * @return {!Array<!proto.IntegratedCircuitMetadata.Pin>}
 */
proto.IntegratedCircuitMetadata.prototype.getPinsList = function() {
  return /** @type{!Array<!proto.IntegratedCircuitMetadata.Pin>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IntegratedCircuitMetadata.Pin, 5));
};


/**
 * @param {!Array<!proto.IntegratedCircuitMetadata.Pin>} value
 * @return {!proto.IntegratedCircuitMetadata} returns this
*/
proto.IntegratedCircuitMetadata.prototype.setPinsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.IntegratedCircuitMetadata.Pin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IntegratedCircuitMetadata.Pin}
 */
proto.IntegratedCircuitMetadata.prototype.addPins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.IntegratedCircuitMetadata.Pin, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IntegratedCircuitMetadata} returns this
 */
proto.IntegratedCircuitMetadata.prototype.clearPinsList = function() {
  return this.setPinsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.IntegratedCircuit.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.IntegratedCircuit.prototype.toObject = function(opt_includeInstance) {
  return proto.IntegratedCircuit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.IntegratedCircuit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntegratedCircuit.toObject = function(includeInstance, msg) {
  var f, obj = {
metadata: (f = msg.getMetadata()) && proto.IntegratedCircuitMetadata.toObject(includeInstance, f),
componentsList: jspb.Message.toObjectList(msg.getComponentsList(),
    proto.Component.toObject, includeInstance),
wiresList: jspb.Message.toObjectList(msg.getWiresList(),
    proto.Wire.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.IntegratedCircuit}
 */
proto.IntegratedCircuit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.IntegratedCircuit;
  return proto.IntegratedCircuit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.IntegratedCircuit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.IntegratedCircuit}
 */
proto.IntegratedCircuit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.IntegratedCircuitMetadata;
      reader.readMessage(value,proto.IntegratedCircuitMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 3:
      var value = new proto.Component;
      reader.readMessage(value,proto.Component.deserializeBinaryFromReader);
      msg.addComponents(value);
      break;
    case 4:
      var value = new proto.Wire;
      reader.readMessage(value,proto.Wire.deserializeBinaryFromReader);
      msg.addWires(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.IntegratedCircuit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.IntegratedCircuit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.IntegratedCircuit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.IntegratedCircuit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.IntegratedCircuitMetadata.serializeBinaryToWriter
    );
  }
  f = message.getComponentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.Component.serializeBinaryToWriter
    );
  }
  f = message.getWiresList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Wire.serializeBinaryToWriter
    );
  }
};


/**
 * optional IntegratedCircuitMetadata metadata = 1;
 * @return {?proto.IntegratedCircuitMetadata}
 */
proto.IntegratedCircuit.prototype.getMetadata = function() {
  return /** @type{?proto.IntegratedCircuitMetadata} */ (
    jspb.Message.getWrapperField(this, proto.IntegratedCircuitMetadata, 1));
};


/**
 * @param {?proto.IntegratedCircuitMetadata|undefined} value
 * @return {!proto.IntegratedCircuit} returns this
*/
proto.IntegratedCircuit.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.IntegratedCircuit} returns this
 */
proto.IntegratedCircuit.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.IntegratedCircuit.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Component components = 3;
 * @return {!Array<!proto.Component>}
 */
proto.IntegratedCircuit.prototype.getComponentsList = function() {
  return /** @type{!Array<!proto.Component>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Component, 3));
};


/**
 * @param {!Array<!proto.Component>} value
 * @return {!proto.IntegratedCircuit} returns this
*/
proto.IntegratedCircuit.prototype.setComponentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.Component=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Component}
 */
proto.IntegratedCircuit.prototype.addComponents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.Component, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IntegratedCircuit} returns this
 */
proto.IntegratedCircuit.prototype.clearComponentsList = function() {
  return this.setComponentsList([]);
};


/**
 * repeated Wire wires = 4;
 * @return {!Array<!proto.Wire>}
 */
proto.IntegratedCircuit.prototype.getWiresList = function() {
  return /** @type{!Array<!proto.Wire>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Wire, 4));
};


/**
 * @param {!Array<!proto.Wire>} value
 * @return {!proto.IntegratedCircuit} returns this
*/
proto.IntegratedCircuit.prototype.setWiresList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Wire=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Wire}
 */
proto.IntegratedCircuit.prototype.addWires = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Wire, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.IntegratedCircuit} returns this
 */
proto.IntegratedCircuit.prototype.clearWiresList = function() {
  return this.setWiresList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Circuit.repeatedFields_ = [3,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Circuit.prototype.toObject = function(opt_includeInstance) {
  return proto.Circuit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Circuit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Circuit.toObject = function(includeInstance, msg) {
  var f, obj = {
metadata: (f = msg.getMetadata()) && proto.CircuitMetadata.toObject(includeInstance, f),
camera: (f = msg.getCamera()) && proto.Camera.toObject(includeInstance, f),
icsList: jspb.Message.toObjectList(msg.getIcsList(),
    proto.IntegratedCircuit.toObject, includeInstance),
componentsList: jspb.Message.toObjectList(msg.getComponentsList(),
    proto.Component.toObject, includeInstance),
wiresList: jspb.Message.toObjectList(msg.getWiresList(),
    proto.Wire.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Circuit}
 */
proto.Circuit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Circuit;
  return proto.Circuit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Circuit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Circuit}
 */
proto.Circuit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CircuitMetadata;
      reader.readMessage(value,proto.CircuitMetadata.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new proto.Camera;
      reader.readMessage(value,proto.Camera.deserializeBinaryFromReader);
      msg.setCamera(value);
      break;
    case 3:
      var value = new proto.IntegratedCircuit;
      reader.readMessage(value,proto.IntegratedCircuit.deserializeBinaryFromReader);
      msg.addIcs(value);
      break;
    case 4:
      var value = new proto.Component;
      reader.readMessage(value,proto.Component.deserializeBinaryFromReader);
      msg.addComponents(value);
      break;
    case 5:
      var value = new proto.Wire;
      reader.readMessage(value,proto.Wire.deserializeBinaryFromReader);
      msg.addWires(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Circuit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Circuit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Circuit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Circuit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CircuitMetadata.serializeBinaryToWriter
    );
  }
  f = message.getCamera();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Camera.serializeBinaryToWriter
    );
  }
  f = message.getIcsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.IntegratedCircuit.serializeBinaryToWriter
    );
  }
  f = message.getComponentsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.Component.serializeBinaryToWriter
    );
  }
  f = message.getWiresList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.Wire.serializeBinaryToWriter
    );
  }
};


/**
 * optional CircuitMetadata metadata = 1;
 * @return {?proto.CircuitMetadata}
 */
proto.Circuit.prototype.getMetadata = function() {
  return /** @type{?proto.CircuitMetadata} */ (
    jspb.Message.getWrapperField(this, proto.CircuitMetadata, 1));
};


/**
 * @param {?proto.CircuitMetadata|undefined} value
 * @return {!proto.Circuit} returns this
*/
proto.Circuit.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Circuit} returns this
 */
proto.Circuit.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Circuit.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Camera camera = 2;
 * @return {?proto.Camera}
 */
proto.Circuit.prototype.getCamera = function() {
  return /** @type{?proto.Camera} */ (
    jspb.Message.getWrapperField(this, proto.Camera, 2));
};


/**
 * @param {?proto.Camera|undefined} value
 * @return {!proto.Circuit} returns this
*/
proto.Circuit.prototype.setCamera = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Circuit} returns this
 */
proto.Circuit.prototype.clearCamera = function() {
  return this.setCamera(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Circuit.prototype.hasCamera = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated IntegratedCircuit ics = 3;
 * @return {!Array<!proto.IntegratedCircuit>}
 */
proto.Circuit.prototype.getIcsList = function() {
  return /** @type{!Array<!proto.IntegratedCircuit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.IntegratedCircuit, 3));
};


/**
 * @param {!Array<!proto.IntegratedCircuit>} value
 * @return {!proto.Circuit} returns this
*/
proto.Circuit.prototype.setIcsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.IntegratedCircuit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.IntegratedCircuit}
 */
proto.Circuit.prototype.addIcs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.IntegratedCircuit, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Circuit} returns this
 */
proto.Circuit.prototype.clearIcsList = function() {
  return this.setIcsList([]);
};


/**
 * repeated Component components = 4;
 * @return {!Array<!proto.Component>}
 */
proto.Circuit.prototype.getComponentsList = function() {
  return /** @type{!Array<!proto.Component>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Component, 4));
};


/**
 * @param {!Array<!proto.Component>} value
 * @return {!proto.Circuit} returns this
*/
proto.Circuit.prototype.setComponentsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.Component=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Component}
 */
proto.Circuit.prototype.addComponents = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.Component, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Circuit} returns this
 */
proto.Circuit.prototype.clearComponentsList = function() {
  return this.setComponentsList([]);
};


/**
 * repeated Wire wires = 5;
 * @return {!Array<!proto.Wire>}
 */
proto.Circuit.prototype.getWiresList = function() {
  return /** @type{!Array<!proto.Wire>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Wire, 5));
};


/**
 * @param {!Array<!proto.Wire>} value
 * @return {!proto.Circuit} returns this
*/
proto.Circuit.prototype.setWiresList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.Wire=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Wire}
 */
proto.Circuit.prototype.addWires = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.Wire, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Circuit} returns this
 */
proto.Circuit.prototype.clearWiresList = function() {
  return this.setWiresList([]);
};


goog.object.extend(exports, proto);
