import {V, Vector} from "Vector";

const horizontal = [V(-0.27,0.08), V(0.27,0.08), V(0.35,0), V(0.27,-0.08), V(-0.27,-0.08), V(-0.35,0)];
const vertical = horizontal.map((v) => v.negativeReciprocal());
const horizontalHalf = [V(-0.095,0.08), V(0.095,0.08), V(0.175,0), V(0.095,-0.08), V(-0.095,-0.08), V(-0.175,0)];
// Old segment display diagonal had top left point at V(-0.155,0.27), and would get painted over by the adjacent vertical.
//  Now that the draw order is different, the added point at V(-0.095, .0794) approximates the same slope.
const topLeft = [V(.095,-0.18), V(-0.045,0.27), V(-0.095,0.27), V(-0.095, .0794), V(0.015,-0.27), V(.095,-0.27)]
const topRight = topLeft.map((v) => v.scale(V(-1, 1)));
const bottomLeft = topLeft.map((v) => v.scale(V(1, -1)));
const bottomRight = topLeft.map((v) => v.scale(V(-1, -1)));
type SegmentType = "vertical" | "horizontal" | "diagonaltr" | "diagonaltl" |
                          "diagonalbr" | "diagonalbl" | "horizontal0.5";

export const segmentToVector: Record<SegmentType, Vector[]> = {
    vertical,
    horizontal,
    "diagonaltr":    topRight,
    "diagonaltl":    topLeft,
    "diagonalbr":    bottomRight,
    "diagonalbl":    bottomLeft,
    "horizontal0.5": horizontalHalf,
}

export const Segments: Record<number, Array<[Vector, SegmentType]>> = {
    7: [
        [V( 0,       1), "horizontal"],
        [V( 0.5,   0.5),   "vertical"],
        [V( 0.5,  -0.5),   "vertical"],
        [V( 0,      -1), "horizontal"],
        [V(-0.5,  -0.5),   "vertical"],
        [V(-0.5,   0.5),   "vertical"],
        [V( 0,       0), "horizontal"],
    ],
    9: [
        [V( 0,       1),   "horizontal"],
        [V( 0.5,   0.5),     "vertical"],
        [V( 0.5,  -0.5),     "vertical"],
        [V( 0,      -1),   "horizontal"],
        [V(-0.5,  -0.5),     "vertical"],
        [V(-0.5,   0.5),     "vertical"],
        [V( 0,       0),   "horizontal"],
        [V( 0.25,  0.5),   "diagonaltr"],
        [V(-0.25,  0.5),   "diagonalbl"],
    ],
    14: [
        [V( 0,        1),     "horizontal"],
        [V( 0.5,    0.5),       "vertical"],
        [V( 0.5,   -0.5),       "vertical"],
        [V( 0,       -1),     "horizontal"],
        [V(-0.5,   -0.5),       "vertical"],
        [V(-0.5,    0.5),       "vertical"],
        [V(-0.25,     0),  "horizontal0.5"],
        [V( 0.25,     0),  "horizontal0.5"],
        [V( 0,      0.5),       "vertical"],
        [V( 0,     -0.5),       "vertical"],
        [V( 0.25,   0.5),     "diagonaltr"],
        [V(-0.25,   0.5),     "diagonaltl"],
        [V(-0.25,  -0.5),     "diagonalbl"],
        [V( 0.25,  -0.5),     "diagonalbr"],
    ],
    16: [
        [V(-0.25,     1),  "horizontal0.5"],
        [V( 0.25,     1),  "horizontal0.5"],
        [V( 0.5,    0.5),       "vertical"],
        [V( 0.5,   -0.5),       "vertical"],
        [V( 0.25,    -1),  "horizontal0.5"],
        [V(-0.25,    -1),  "horizontal0.5"],
        [V(-0.5,   -0.5),       "vertical"],
        [V(-0.5,    0.5),       "vertical"],
        [V(-0.25,     0),  "horizontal0.5"],
        [V( 0.25,     0),  "horizontal0.5"],
        [V( 0,      0.5),       "vertical"],
        [V( 0,     -0.5),       "vertical"],
        [V( 0.25,   0.5),     "diagonaltr"],
        [V(-0.25,   0.5),     "diagonaltl"],
        [V(-0.25,  -0.5),     "diagonalbl"],
        [V( 0.25,  -0.5),     "diagonalbr"],
    ],
} as const

export const ASCIIFont: Record<string, number[][]> = {
    7: [
        [],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],
        [],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],

        // space - /
        [],
        [1],
        [1, 5],
        [1, 2, 4, 5],
        [0, 3, 5, 6],
        [0, 2, 3, 5],
        [0, 1, 3, 4, 5, 6],
        [5],
        [0, 3, 4, 5],
        [0, 1, 2, 3],
        [0, 1, 5, 6],
        [4, 5, 6],
        [2, 3],
        [6],
        [4],
        [1, 6],

        // 0-9
        [0, 1, 2, 3, 4, 5],
        [1, 2],
        [0, 1, 3, 4, 6],
        [0, 1, 2, 3, 6],
        [1, 2, 5, 6],
        [0, 2, 3, 5, 6],
        [0, 2, 3, 4, 5, 6],
        [0, 1, 2],
        [0, 1, 2, 3, 4, 5, 6],
        [0, 1, 2, 5, 6],

        // : - @
        [3, 6],
        [2, 3, 6],
        [0, 5, 6],
        [0, 6],
        [0, 1, 6],
        [0, 1, 4, 6],
        [0, 1, 2, 3, 4, 6],

        // A - Z
        [0, 1, 2, 4, 5, 6],
        [2, 3, 4, 5, 6],
        [0, 3, 4, 5],
        [1, 2, 3, 4, 6],
        [0, 3, 4, 5, 6],
        [0, 4, 5, 6],
        [0, 2, 3, 4, 5],
        [1, 2, 4, 5, 6],
        [4, 5],
        [1, 2, 3, 4],
        [0, 2, 4, 5, 6],
        [3, 4, 5],
        [0, 2, 4],
        [0, 1, 2, 4, 5],
        [0, 1, 2, 3, 4, 5],
        [0, 1, 4, 5, 6],
        [0, 1, 3, 5, 6],
        [0, 1, 4, 5],
        [0, 2, 3, 5, 6],
        [3, 4, 5, 6],
        [1, 2, 3, 4, 5],
        [1, 2, 3, 5],
        [1, 3, 5],
        [1, 2, 4, 5, 6],
        [1, 2, 3, 5, 6],
        [0, 1, 3, 6],

        // [ - `
        [0, 3, 4, 5],
        [5, 6],
        [0, 1, 2, 3],
        [0, 1, 5],
        [3],

        [1],

        // a - z
        [0, 1, 2, 3, 4, 6],
        [2, 3, 4, 5, 6],
        [3, 4, 6],
        [1, 2, 3, 4, 6],
        [0, 1, 3, 4, 5, 6],
        [0, 4, 5, 6],
        [0, 1, 2, 3, 5, 6],
        [2, 4, 5, 6],
        [4],
        [2, 3],
        [0, 2, 4, 5, 6],
        [4, 5],
        [2, 4],
        [2, 4, 6],
        [2, 3, 4, 6],
        [0, 1, 4, 5, 6],
        [0, 1, 2, 5, 6],
        [4, 6],
        [0, 2, 3, 5, 6],
        [3, 4, 5, 6],
        [2, 3, 4],
        [2, 3, 4],
        [2, 4],
        [1, 2, 4, 5, 6],
        [1, 2, 3, 5, 6],
        [0, 1, 3, 6],

        // { - ~
        [1, 6, 2],
        [4, 5],
        [4, 5, 6],
        [0],
    ],


    9: [
        [],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],
        [],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],

        [],
        [3, 7],
        [1, 5],
        [1, 2, 4, 5],
        [0, 2, 3, 5, 6, 7, 8],
        [2, 5, 7, 8],
        [0, 3, 5, 6, 7, 8],
        [7],
        [0, 3, 4, 5],
        [0, 1, 2, 3],
        [0, 1, 7],
        [6, 7, 8],
        [8],
        [6],
        [4],
        [7, 8],

        [0, 1, 2, 3, 4, 5, 7, 8],
        [1, 2, 7],
        [0, 1, 3, 4, 6],
        [0, 1, 2, 3, 6],
        [1, 2, 5, 6],
        [0, 2, 3, 5, 6],
        [0, 2, 3, 4, 5, 6],
        [0, 7, 8],
        [0, 1, 2, 3, 4, 5, 6],
        [0, 1, 2, 5, 6],

        [2, 7],
        [5, 8],
        [6, 7],
        [0, 6],
        [0, 7],
        [0, 4, 7],
        [0, 1, 3, 4, 5, 7],

        [0, 1, 2, 4, 5, 6],
        [0, 2, 3, 4, 5, 6, 7],
        [0, 3, 4, 5],
        [0, 4, 5, 7, 8],
        [0, 3, 4, 5, 6],
        [0, 4, 5, 6],
        [0, 2, 3, 4, 5],
        [1, 2, 4, 5, 6],
        [4, 5],
        [1, 2, 3, 4],
        [2, 4, 5, 6, 7],
        [3, 4, 5],
        [0, 1, 2, 4, 5, 7],
        [0, 1, 2, 4, 5],
        [0, 1, 2, 3, 4, 5],
        [0, 1, 4, 5, 6],
        [0, 1, 2, 3, 4, 5, 8],
        [0, 2, 4, 5, 6, 7],
        [0, 2, 3, 5, 6],
        [0, 1, 5, 7, 8],
        [1, 2, 3, 4, 5],
        [4, 5, 7, 8],
        [1, 2, 3, 4, 5, 8],
        [2, 5, 6, 7, 8],
        [1, 5, 6, 8],
        [0, 3, 7, 8],

        [0, 3, 4, 5],
        [2, 5, 6],
        [0, 1, 2, 3],
        [1, 7],
        [3],

        [0, 1],

        [2, 3, 6, 8],
        [2, 3, 4, 5, 6],
        [3, 4, 6],
        [1, 2, 3, 4, 6],
        [3, 4, 6, 8],
        [4, 6, 7],
        [1, 2, 3, 6, 7],
        [2, 4, 5, 6],
        [4],
        [2, 3],
        [3, 4, 5, 6, 8],
        [4, 5],
        [2, 4, 6, 8],
        [2, 4, 6],
        [2, 3, 4, 6],
        [0, 1, 4, 5, 6],
        [0, 1, 2, 5, 6],
        [4, 6],
        [0, 2, 3, 5, 6],
        [3, 4, 5, 6],
        [2, 3, 4],
        [4, 8],
        [2, 3, 4, 8],
        [1, 2, 4, 5, 6],
        [1, 2, 3, 5, 6],
        [0, 1, 3, 6],

        [1, 6, 2],
        [4, 5],
        [4, 5, 6],
        [1, 5, 7],
    ],


    14: [
        [],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],
        [],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],

        [],
        [1, 2],
        [1, 8],
        [1, 2, 3, 6, 7, 8, 9],
        [0, 2, 3, 5, 8, 9],
        [2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13],
        [0, 3, 4, 6, 8, 11, 13],
        [8],
        [10, 13],
        [11, 12],
        [6, 7, 8, 9, 10, 11, 12, 13],
        [6, 7, 8, 9],
        [12],
        [6, 7],
        [4],
        [10, 12],

        [0, 1, 2, 3, 4, 5, 10, 12],
        [1, 2, 10],
        [0, 1, 3, 4, 6, 7],
        [0, 1, 2, 3, 7],
        [1, 2, 5, 6, 7],
        [0, 3, 5, 6, 13],
        [0, 2, 3, 4, 5, 6, 7],
        [0, 1, 2],
        [0, 1, 2, 3, 4, 5, 6, 7],
        [0, 1, 2, 5, 6, 7],

        [8, 9],
        [8, 12],
        [6, 10, 13],
        [3, 6, 7],
        [7, 11, 12],
        [0, 1, 7, 9],
        [0, 1, 3, 4, 5, 7, 8],

        [0, 1, 2, 4, 5, 6, 7],
        [0, 1, 2, 3, 7, 8, 9],
        [0, 3, 4, 5],
        [0, 1, 2, 3, 8, 9],
        [0, 3, 4, 5, 6],
        [0, 4, 5, 6],
        [0, 2, 3, 4, 5, 7],
        [1, 2, 4, 5, 6, 7],
        [0, 3, 8, 9],
        [1, 2, 3, 4],
        [4, 5, 6, 10, 13],
        [3, 4, 5],
        [1, 2, 4, 5, 10, 11],
        [1, 2, 4, 5, 11, 13],
        [0, 1, 2, 3, 4, 5],
        [0, 1, 4, 5, 6, 7],
        [0, 1, 2, 3, 4, 5, 13],
        [0, 1, 4, 5, 6, 7, 13],
        [0, 2, 3, 5, 6, 7],
        [0, 8, 9],
        [1, 2, 3, 4, 5],
        [4, 5, 10, 12],
        [1, 2, 4, 5, 12, 13],
        [10, 11, 12, 13],
        [1, 2, 3, 5, 6, 7],
        [0, 3, 10, 12],

        [0, 3, 4, 5],
        [11, 13],
        [0, 1, 2, 3],
        [12, 13],
        [3],

        [11],

        [3, 4, 6, 9],
        [3, 4, 5, 6, 13],
        [3, 4, 6, 7],
        [1, 2, 3, 7, 12],
        [3, 4, 6, 12],
        [6, 7, 9, 10],
        [1, 2, 3, 7, 10],
        [4, 5, 6, 9],
        [9],
        [4, 8, 12],
        [8, 9, 10, 13],
        [4, 5],
        [2, 4, 6, 7, 9],
        [4, 6, 9],
        [2, 3, 4, 6, 7],
        [4, 5, 6, 11],
        [1, 2, 7, 10],
        [4, 6],
        [3, 7, 13],
        [3, 4, 5, 6],
        [2, 3, 4],
        [4, 12],
        [2, 4, 12, 13],
        [10, 11, 12, 13],
        [1, 2, 3, 7, 8],
        [3, 6, 12],

        [0, 3, 6, 11, 12],
        [8, 9],
        [0, 3, 7, 10, 13],
        [6, 7, 10, 12],
    ],


    16: [
        [],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],
        [],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],

        [],
        [3, 2],
        [10, 2],
        [8, 11, 9, 10, 5, 4, 3, 2],
        [8, 11, 9, 10, 7, 5, 4, 3, 1, 0],
        [8, 14, 11, 9, 12, 10, 7, 4, 3, 0],
        [8, 15, 10, 13, 6, 5, 4, 0],
        [10],
        [15, 12],
        [14, 13],
        [8, 14, 11, 15, 9, 12, 10, 13],
        [8, 11, 9, 10],
        [14],
        [8, 9],
        [],
        [14, 12],

        [14, 12, 7, 6, 5, 4, 3, 2, 1, 0],
        [12, 3, 2],
        [8, 9, 6, 5, 4, 2, 1, 0],
        [9, 5, 4, 3, 2, 1, 0],
        [8, 9, 7, 3, 2],
        [8, 15, 7, 5, 4, 1, 0],
        [8, 9, 7, 6, 5, 4, 3, 1, 0],
        [3, 2, 1, 0],
        [8, 9, 7, 6, 5, 4, 3, 2, 1, 0],
        [8, 9, 7, 5, 4, 3, 2, 1, 0],

        [11, 10],
        [14, 10],
        [8, 15, 12],
        [8, 9, 5, 4],
        [14, 9, 13],
        [11, 9, 2, 1, 0],
        [9, 10, 7, 6, 5, 4, 2, 1, 0],

        [8, 9, 7, 6, 3, 2, 1, 0],
        [11, 9, 10, 5, 4, 3, 2, 1, 0],
        [7, 6, 5, 4, 1, 0],
        [11, 10, 5, 4, 3, 2, 1, 0],
        [8, 7, 6, 5, 4, 1, 0],
        [8, 7, 6, 1, 0],
        [9, 7, 6, 5, 4, 3, 1, 0],
        [8, 9, 7, 6, 3, 2],
        [11, 10, 5, 4, 1, 0],
        [6, 5, 4, 3, 2],
        [8, 15, 12, 7, 6],
        [7, 6, 5, 4],
        [12, 13, 7, 6, 3, 2],
        [15, 13, 7, 6, 3, 2],
        [7, 6, 5, 4, 3, 2, 1, 0],
        [8, 9, 7, 6, 2, 1, 0],
        [15, 7, 6, 5, 4, 3, 2, 1, 0],
        [8, 15, 9, 7, 6, 2, 1, 0],
        [8, 9, 7, 5, 4, 3, 1, 0],
        [11, 10, 1, 0],
        [7, 6, 5, 4, 3, 2],
        [14, 12, 7, 6],
        [14, 15, 7, 6, 3, 2],
        [14, 15, 12, 13],
        [8, 9, 7, 5, 4, 3, 2],
        [14, 12, 5, 4, 1, 0],

        [11, 10, 4, 1],
        [15, 13],
        [11, 10, 5, 0],
        [14, 15],
        [5, 4],

        [13],

        [8, 11, 6, 5, 4],
        [8, 11, 7, 6, 5],
        [8, 6, 5],
        [11, 9, 4, 3, 2],
        [8, 14, 6, 5],
        [8, 11, 9, 10, 1],
        [8, 11, 10, 7, 5, 0],
        [8, 11, 7, 6],
        [11],
        [11, 10, 6, 5],
        [11, 15, 12, 10],
        [7, 6],
        [8, 11, 9, 6, 3],
        [8, 11, 6],
        [8, 11, 6, 5],
        [8, 10, 7, 6, 0],
        [8, 11, 10, 7, 0],
        [8, 6],
        [8, 11, 7, 5, 0],
        [8, 7, 6, 5],
        [11, 6, 5],
        [14, 6],
        [14, 15, 6, 3],
        [14, 15, 12, 13],
        [9, 10, 4, 3, 2],
        [8, 14, 5],

        [8, 11, 10, 4, 1],
        [11, 10],
        [11, 9, 10, 5, 0],
        [8, 14, 9, 12],
        [],
    ],
};

export const BCDFont: Record<string, number[][]> =
    Object.fromEntries(
        Object.entries(ASCIIFont).map(
                                    // Get values 0-9   and vals  A-F
            ([key, val]) => [key, [...val.slice(48, 58), ...val.slice(65, 71)]]
        )
    );
