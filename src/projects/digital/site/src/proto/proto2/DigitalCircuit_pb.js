// source: src/projects/digital/site/src/proto/DigitalCircuit.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var src_projects_shared_site_src_proto_Circuit_pb = require('../../../../../../../src/projects/shared/site/src/proto/proto2/Circuit_pb.js');
goog.object.extend(proto, src_projects_shared_site_src_proto_Circuit_pb);
goog.exportSymbol('proto.DigitalCircuit', null, global);
goog.exportSymbol('proto.DigitalSimState', null, global);
goog.exportSymbol('proto.DigitalSimState.Signal', null, global);
goog.exportSymbol('proto.DigitalSimState.State', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DigitalSimState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DigitalSimState.repeatedFields_, null);
};
goog.inherits(proto.DigitalSimState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DigitalSimState.displayName = 'proto.DigitalSimState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DigitalSimState.State = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DigitalSimState.State.repeatedFields_, null);
};
goog.inherits(proto.DigitalSimState.State, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DigitalSimState.State.displayName = 'proto.DigitalSimState.State';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DigitalCircuit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.DigitalCircuit.repeatedFields_, null);
};
goog.inherits(proto.DigitalCircuit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.DigitalCircuit.displayName = 'proto.DigitalCircuit';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DigitalSimState.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DigitalSimState.prototype.toObject = function(opt_includeInstance) {
  return proto.DigitalSimState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DigitalSimState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DigitalSimState.toObject = function(includeInstance, msg) {
  var f, obj = {
signalsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
statesMap: (f = msg.getStatesMap()) ? f.toObject(includeInstance, proto.DigitalSimState.State.toObject) : [],
icstatesMap: (f = msg.getIcstatesMap()) ? f.toObject(includeInstance, proto.DigitalSimState.toObject) : []
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DigitalSimState}
 */
proto.DigitalSimState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DigitalSimState;
  return proto.DigitalSimState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DigitalSimState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DigitalSimState}
 */
proto.DigitalSimState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.DigitalSimState.Signal>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addSignals(values[i]);
      }
      break;
    case 2:
      var value = msg.getStatesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.DigitalSimState.State.deserializeBinaryFromReader, 0, new proto.DigitalSimState.State());
         });
      break;
    case 3:
      var value = msg.getIcstatesMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readUint32, jspb.BinaryReader.prototype.readMessage, proto.DigitalSimState.deserializeBinaryFromReader, 0, new proto.DigitalSimState());
         });
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DigitalSimState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DigitalSimState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DigitalSimState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DigitalSimState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSignalsList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
  f = message.getStatesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(2, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.DigitalSimState.State.serializeBinaryToWriter);
  }
  f = message.getIcstatesMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeUint32, jspb.BinaryWriter.prototype.writeMessage, proto.DigitalSimState.serializeBinaryToWriter);
  }
};


/**
 * @enum {number}
 */
proto.DigitalSimState.Signal = {
  OFF: 0,
  ON: 1,
  METASTABLE: 2
};


/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DigitalSimState.State.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DigitalSimState.State.prototype.toObject = function(opt_includeInstance) {
  return proto.DigitalSimState.State.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DigitalSimState.State} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DigitalSimState.State.toObject = function(includeInstance, msg) {
  var f, obj = {
stateList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DigitalSimState.State}
 */
proto.DigitalSimState.State.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DigitalSimState.State;
  return proto.DigitalSimState.State.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DigitalSimState.State} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DigitalSimState.State}
 */
proto.DigitalSimState.State.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var values = /** @type {!Array<!proto.DigitalSimState.Signal>} */ (reader.isDelimited() ? reader.readPackedEnum() : [reader.readEnum()]);
      for (var i = 0; i < values.length; i++) {
        msg.addState(values[i]);
      }
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DigitalSimState.State.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DigitalSimState.State.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DigitalSimState.State} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DigitalSimState.State.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateList();
  if (f.length > 0) {
    writer.writePackedEnum(
      1,
      f
    );
  }
};


/**
 * repeated Signal state = 1;
 * @return {!Array<!proto.DigitalSimState.Signal>}
 */
proto.DigitalSimState.State.prototype.getStateList = function() {
  return /** @type {!Array<!proto.DigitalSimState.Signal>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.DigitalSimState.Signal>} value
 * @return {!proto.DigitalSimState.State} returns this
 */
proto.DigitalSimState.State.prototype.setStateList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.DigitalSimState.Signal} value
 * @param {number=} opt_index
 * @return {!proto.DigitalSimState.State} returns this
 */
proto.DigitalSimState.State.prototype.addState = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DigitalSimState.State} returns this
 */
proto.DigitalSimState.State.prototype.clearStateList = function() {
  return this.setStateList([]);
};


/**
 * repeated Signal signals = 1;
 * @return {!Array<!proto.DigitalSimState.Signal>}
 */
proto.DigitalSimState.prototype.getSignalsList = function() {
  return /** @type {!Array<!proto.DigitalSimState.Signal>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<!proto.DigitalSimState.Signal>} value
 * @return {!proto.DigitalSimState} returns this
 */
proto.DigitalSimState.prototype.setSignalsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!proto.DigitalSimState.Signal} value
 * @param {number=} opt_index
 * @return {!proto.DigitalSimState} returns this
 */
proto.DigitalSimState.prototype.addSignals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DigitalSimState} returns this
 */
proto.DigitalSimState.prototype.clearSignalsList = function() {
  return this.setSignalsList([]);
};


/**
 * map<uint32, State> states = 2;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.DigitalSimState.State>}
 */
proto.DigitalSimState.prototype.getStatesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.DigitalSimState.State>} */ (
      jspb.Message.getMapField(this, 2, opt_noLazyCreate,
      proto.DigitalSimState.State));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.DigitalSimState} returns this
 */
proto.DigitalSimState.prototype.clearStatesMap = function() {
  this.getStatesMap().clear();
  return this;
};


/**
 * map<uint32, DigitalSimState> icStates = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<number,!proto.DigitalSimState>}
 */
proto.DigitalSimState.prototype.getIcstatesMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<number,!proto.DigitalSimState>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      proto.DigitalSimState));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.DigitalSimState} returns this
 */
proto.DigitalSimState.prototype.clearIcstatesMap = function() {
  this.getIcstatesMap().clear();
  return this;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.DigitalCircuit.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DigitalCircuit.prototype.toObject = function(opt_includeInstance) {
  return proto.DigitalCircuit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DigitalCircuit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DigitalCircuit.toObject = function(includeInstance, msg) {
  var f, obj = {
circuit: (f = msg.getCircuit()) && src_projects_shared_site_src_proto_Circuit_pb.Circuit.toObject(includeInstance, f),
propagationtime: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
icinitialsimstatesList: jspb.Message.toObjectList(msg.getIcinitialsimstatesList(),
    proto.DigitalSimState.toObject, includeInstance),
simstate: (f = msg.getSimstate()) && proto.DigitalSimState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DigitalCircuit}
 */
proto.DigitalCircuit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DigitalCircuit;
  return proto.DigitalCircuit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DigitalCircuit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DigitalCircuit}
 */
proto.DigitalCircuit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new src_projects_shared_site_src_proto_Circuit_pb.Circuit;
      reader.readMessage(value,src_projects_shared_site_src_proto_Circuit_pb.Circuit.deserializeBinaryFromReader);
      msg.setCircuit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPropagationtime(value);
      break;
    case 3:
      var value = new proto.DigitalSimState;
      reader.readMessage(value,proto.DigitalSimState.deserializeBinaryFromReader);
      msg.addIcinitialsimstates(value);
      break;
    case 4:
      var value = new proto.DigitalSimState;
      reader.readMessage(value,proto.DigitalSimState.deserializeBinaryFromReader);
      msg.setSimstate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DigitalCircuit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DigitalCircuit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DigitalCircuit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DigitalCircuit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCircuit();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      src_projects_shared_site_src_proto_Circuit_pb.Circuit.serializeBinaryToWriter
    );
  }
  f = message.getPropagationtime();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getIcinitialsimstatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.DigitalSimState.serializeBinaryToWriter
    );
  }
  f = message.getSimstate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.DigitalSimState.serializeBinaryToWriter
    );
  }
};


/**
 * optional Circuit circuit = 1;
 * @return {?proto.Circuit}
 */
proto.DigitalCircuit.prototype.getCircuit = function() {
  return /** @type{?proto.Circuit} */ (
    jspb.Message.getWrapperField(this, src_projects_shared_site_src_proto_Circuit_pb.Circuit, 1));
};


/**
 * @param {?proto.Circuit|undefined} value
 * @return {!proto.DigitalCircuit} returns this
*/
proto.DigitalCircuit.prototype.setCircuit = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DigitalCircuit} returns this
 */
proto.DigitalCircuit.prototype.clearCircuit = function() {
  return this.setCircuit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DigitalCircuit.prototype.hasCircuit = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional float propagationTime = 2;
 * @return {number}
 */
proto.DigitalCircuit.prototype.getPropagationtime = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.DigitalCircuit} returns this
 */
proto.DigitalCircuit.prototype.setPropagationtime = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated DigitalSimState icInitialSimStates = 3;
 * @return {!Array<!proto.DigitalSimState>}
 */
proto.DigitalCircuit.prototype.getIcinitialsimstatesList = function() {
  return /** @type{!Array<!proto.DigitalSimState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.DigitalSimState, 3));
};


/**
 * @param {!Array<!proto.DigitalSimState>} value
 * @return {!proto.DigitalCircuit} returns this
*/
proto.DigitalCircuit.prototype.setIcinitialsimstatesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.DigitalSimState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.DigitalSimState}
 */
proto.DigitalCircuit.prototype.addIcinitialsimstates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.DigitalSimState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.DigitalCircuit} returns this
 */
proto.DigitalCircuit.prototype.clearIcinitialsimstatesList = function() {
  return this.setIcinitialsimstatesList([]);
};


/**
 * optional DigitalSimState simState = 4;
 * @return {?proto.DigitalSimState}
 */
proto.DigitalCircuit.prototype.getSimstate = function() {
  return /** @type{?proto.DigitalSimState} */ (
    jspb.Message.getWrapperField(this, proto.DigitalSimState, 4));
};


/**
 * @param {?proto.DigitalSimState|undefined} value
 * @return {!proto.DigitalCircuit} returns this
*/
proto.DigitalCircuit.prototype.setSimstate = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.DigitalCircuit} returns this
 */
proto.DigitalCircuit.prototype.clearSimstate = function() {
  return this.setSimstate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.DigitalCircuit.prototype.hasSimstate = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto);
