import {Formats} from "./Constants/Formats";
import {OperatorFormat} from "./Constants/DataStructures";

import {DigitalComponent} from "digital/models/index";
import {DigitalObjectSet} from "digital/utils/ComponentUtils";
import {ValidateInputOutputTypes} from "./Utils";
import {GenerateInputTree} from "./GenerateInputTree";
import {GenerateTokens} from "./GenerateTokens";
import {TreeToCircuit} from "./TreeToCircuit";


/**
 * Main driver function for parsing an expression into a circuit
 *
 * @param  inputs A map correlating input name to the DigitalComponent it represents
 * @param  expression The expression to be parsed
 * @param  output The DigitalComponent to use as an output, port 0 will be used
 * @param  ops The strings used to represent the different operators
 * @return The circuit generated by the given expression, null on error (see above)
 * @throws {Error} parenthesis do not include anything (such as "()")
 * @throws {Error} an opening parenthesis is missing a corresponding closing parenthesis (such as "(")
 * @throws {Error} a closing parenthesis is missing a corresponding opening parenthesis (such as ")")
 * @throws {Error} |, &, or ^ are missing an operand on their left (such as "a|")
 * @throws {Error} |, &, ^, or ! are missing an operand on their right (such as "!a")
 * @throws {Error} there is no operator between two inputs (such as "a b")
 * @throws {Error} the expression references an input not found in inputs
 * @throws {Error} if ops is missing the keys "|", "^", "&", "(", ")", or "separator"
 * @throws {Error} if the value in ops for keys "|", "^", "&", "(", ")", or "separator" is ""
 */
export function ExpressionToCircuit(inputs: Map<string, DigitalComponent>,
                                    expression: string,
                                    output: DigitalComponent,
                                    ops: OperatorFormat = Formats[0]): DigitalObjectSet | null {

    ValidateInputOutputTypes(inputs, output);

    const tokenList = GenerateTokens(expression, ops);

    const connectedTree = GenerateInputTree(tokenList, ops.ops);

    const fullCircuit = TreeToCircuit(connectedTree, inputs, output);

    return new DigitalObjectSet(fullCircuit);
}